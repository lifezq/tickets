// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/lifezq/tickets/internal/model"
)

func newMyDatum(db *gorm.DB, opts ...gen.DOOption) myDatum {
	_myDatum := myDatum{}

	_myDatum.myDatumDo.UseDB(db, opts...)
	_myDatum.myDatumDo.UseModel(&model.MyDatum{})

	tableName := _myDatum.myDatumDo.TableName()
	_myDatum.ALL = field.NewAsterisk(tableName)
	_myDatum.ID = field.NewInt32(tableName, "id")
	_myDatum.Numbers = field.NewString(tableName, "numbers")

	_myDatum.fillFieldMap()

	return _myDatum
}

type myDatum struct {
	myDatumDo

	ALL     field.Asterisk
	ID      field.Int32
	Numbers field.String

	fieldMap map[string]field.Expr
}

func (m myDatum) Table(newTableName string) *myDatum {
	m.myDatumDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m myDatum) As(alias string) *myDatum {
	m.myDatumDo.DO = *(m.myDatumDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *myDatum) updateTableName(table string) *myDatum {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Numbers = field.NewString(table, "numbers")

	m.fillFieldMap()

	return m
}

func (m *myDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *myDatum) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["id"] = m.ID
	m.fieldMap["numbers"] = m.Numbers
}

func (m myDatum) clone(db *gorm.DB) myDatum {
	m.myDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m myDatum) replaceDB(db *gorm.DB) myDatum {
	m.myDatumDo.ReplaceDB(db)
	return m
}

type myDatumDo struct{ gen.DO }

type IMyDatumDo interface {
	gen.SubQuery
	Debug() IMyDatumDo
	WithContext(ctx context.Context) IMyDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMyDatumDo
	WriteDB() IMyDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMyDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMyDatumDo
	Not(conds ...gen.Condition) IMyDatumDo
	Or(conds ...gen.Condition) IMyDatumDo
	Select(conds ...field.Expr) IMyDatumDo
	Where(conds ...gen.Condition) IMyDatumDo
	Order(conds ...field.Expr) IMyDatumDo
	Distinct(cols ...field.Expr) IMyDatumDo
	Omit(cols ...field.Expr) IMyDatumDo
	Join(table schema.Tabler, on ...field.Expr) IMyDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMyDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMyDatumDo
	Group(cols ...field.Expr) IMyDatumDo
	Having(conds ...gen.Condition) IMyDatumDo
	Limit(limit int) IMyDatumDo
	Offset(offset int) IMyDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMyDatumDo
	Unscoped() IMyDatumDo
	Create(values ...*model.MyDatum) error
	CreateInBatches(values []*model.MyDatum, batchSize int) error
	Save(values ...*model.MyDatum) error
	First() (*model.MyDatum, error)
	Take() (*model.MyDatum, error)
	Last() (*model.MyDatum, error)
	Find() ([]*model.MyDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MyDatum, err error)
	FindInBatches(result *[]*model.MyDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MyDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMyDatumDo
	Assign(attrs ...field.AssignExpr) IMyDatumDo
	Joins(fields ...field.RelationField) IMyDatumDo
	Preload(fields ...field.RelationField) IMyDatumDo
	FirstOrInit() (*model.MyDatum, error)
	FirstOrCreate() (*model.MyDatum, error)
	FindByPage(offset int, limit int) (result []*model.MyDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMyDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByID(id int32) (result *model.MyDatum, err error)
}

// where("`id`=@id")
func (m myDatumDo) FindByID(id int32) (result *model.MyDatum, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("`id`=? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m myDatumDo) Debug() IMyDatumDo {
	return m.withDO(m.DO.Debug())
}

func (m myDatumDo) WithContext(ctx context.Context) IMyDatumDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m myDatumDo) ReadDB() IMyDatumDo {
	return m.Clauses(dbresolver.Read)
}

func (m myDatumDo) WriteDB() IMyDatumDo {
	return m.Clauses(dbresolver.Write)
}

func (m myDatumDo) Session(config *gorm.Session) IMyDatumDo {
	return m.withDO(m.DO.Session(config))
}

func (m myDatumDo) Clauses(conds ...clause.Expression) IMyDatumDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m myDatumDo) Returning(value interface{}, columns ...string) IMyDatumDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m myDatumDo) Not(conds ...gen.Condition) IMyDatumDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m myDatumDo) Or(conds ...gen.Condition) IMyDatumDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m myDatumDo) Select(conds ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m myDatumDo) Where(conds ...gen.Condition) IMyDatumDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m myDatumDo) Order(conds ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m myDatumDo) Distinct(cols ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m myDatumDo) Omit(cols ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m myDatumDo) Join(table schema.Tabler, on ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m myDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m myDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m myDatumDo) Group(cols ...field.Expr) IMyDatumDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m myDatumDo) Having(conds ...gen.Condition) IMyDatumDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m myDatumDo) Limit(limit int) IMyDatumDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m myDatumDo) Offset(offset int) IMyDatumDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m myDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMyDatumDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m myDatumDo) Unscoped() IMyDatumDo {
	return m.withDO(m.DO.Unscoped())
}

func (m myDatumDo) Create(values ...*model.MyDatum) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m myDatumDo) CreateInBatches(values []*model.MyDatum, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m myDatumDo) Save(values ...*model.MyDatum) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m myDatumDo) First() (*model.MyDatum, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyDatum), nil
	}
}

func (m myDatumDo) Take() (*model.MyDatum, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyDatum), nil
	}
}

func (m myDatumDo) Last() (*model.MyDatum, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyDatum), nil
	}
}

func (m myDatumDo) Find() ([]*model.MyDatum, error) {
	result, err := m.DO.Find()
	return result.([]*model.MyDatum), err
}

func (m myDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MyDatum, err error) {
	buf := make([]*model.MyDatum, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m myDatumDo) FindInBatches(result *[]*model.MyDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m myDatumDo) Attrs(attrs ...field.AssignExpr) IMyDatumDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m myDatumDo) Assign(attrs ...field.AssignExpr) IMyDatumDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m myDatumDo) Joins(fields ...field.RelationField) IMyDatumDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m myDatumDo) Preload(fields ...field.RelationField) IMyDatumDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m myDatumDo) FirstOrInit() (*model.MyDatum, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyDatum), nil
	}
}

func (m myDatumDo) FirstOrCreate() (*model.MyDatum, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyDatum), nil
	}
}

func (m myDatumDo) FindByPage(offset int, limit int) (result []*model.MyDatum, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m myDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m myDatumDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m myDatumDo) Delete(models ...*model.MyDatum) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *myDatumDo) withDO(do gen.Dao) *myDatumDo {
	m.DO = *do.(*gen.DO)
	return m
}
